/*
	This file is part of cpp-ethereum.

	cpp-ethereum is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	cpp-ethereum is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with cpp-ethereum.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file CanonBlockChain.cpp
 * @author Gav Wood <i@gavwood.com>
 * @date 2014
 */

#include "CanonBlockChain.h"

#include <test/JsonSpiritHeaders.h>
#include <boost/filesystem.hpp>
#include <libdevcore/Common.h>
#include <libdevcore/RLP.h>
#include <libdevcrypto/FileSystem.h>
#include <libethcore/Exceptions.h>
#include <libethcore/ProofOfWork.h>
#include <libethcore/BlockInfo.h>
#include <liblll/Compiler.h>
#include "GenesisInfo.h"
#include "State.h"
#include "Defaults.h"
using namespace std;
using namespace dev;
using namespace dev::eth;
namespace js = json_spirit;

#define ETH_CATCH 1

std::map<Address, Account> const& dev::eth::genesisState()
{
	static std::map<Address, Account> s_ret;

	if (s_ret.empty())
	{
		s_ret[Address(2600)] = Account(0, Account::ContractConception); //registrar
		s_ret[Address(2600)].setCode(fromHex("60003560e060020a9004806301984892146100b05780631c83171b146100c5578063449c2090146100d65780635c820c96146100f45780635d574e321461010f5780635fd4b08a14610123578063618242da146101385780636be16bed1461014d5780636c4489b41461016b57806396077307146101a75780639e71f357146101bb578063c284bc2a146101cf578063e50f599a146101e0578063e5811b35146101f7578063ec7b92001461021557005b6100bb60043561029f565b8060005260206000f35b6100d0600435610233565b60006000f35b6100e1600435610678565b80600160a060020a031660005260206000f35b6100fc6102c5565b80600160a060020a031660005260206000f35b61011d600435602435610600565b60006000f35b61012e6004356103d5565b8060005260206000f35b610143600435610698565b8060005260206000f35b6101586004356106d5565b80600160a060020a031660005260206000f35b6101766004356106f5565b83600160a060020a031660005282600160a060020a031660205281600160a060020a03166040528060605260806000f35b6101b560043560243561035d565b60006000f35b6101c96004356024356102e1565b60006000f35b6101da6004356104b2565b60006000f35b6101f16004356024356044356103dc565b60006000f35b610202600435610356565b80600160a060020a031660005260206000f35b6102206004356106b8565b80600160a060020a031660005260206000f35b6001600082815260200190815260200160002054600160a060020a031660001461025c5761029c565b336001600083815260200190815260200160002081905550807f18d67da0cd86808336a3aa8912f6ea70c5250f1a98b586d1017ef56fe199d4fc60006000a25b50565b60006000600083600160a060020a03168152602001908152602001600020549050919050565b600073c6d9d2cd449a754c494264e1809c50e34d64562b905090565b33600160a060020a03166001600084815260200190815260200160002054600160a060020a03161461031257610352565b806001600084815260200190815260200160002081905550817f18d67da0cd86808336a3aa8912f6ea70c5250f1a98b586d1017ef56fe199d4fc60006000a25b5050565b6000919050565b33600160a060020a03166001600084815260200190815260200160002054600160a060020a03161461038e576103d1565b806001600084815260200190815260200160002060020181905550817f18d67da0cd86808336a3aa8912f6ea70c5250f1a98b586d1017ef56fe199d4fc60006000a25b5050565b6000919050565b33600160a060020a03166001600085815260200190815260200160002054600160a060020a03161461040d576104ad565b8160016000858152602001908152602001600020600101819055508061043257610485565b81600160a060020a0316837f680ad70765443c2967675ab0fb91a46350c01c6df59bf9a41ff8a8dd097464ec60006000a3826000600084600160a060020a03168152602001908152602001600020819055505b827f18d67da0cd86808336a3aa8912f6ea70c5250f1a98b586d1017ef56fe199d4fc60006000a25b505050565b33600160a060020a03166001600083815260200190815260200160002054600160a060020a0316146104e3576105fd565b80600060006001600085815260200190815260200160002060010154600160a060020a031681526020019081526020016000205414610521576105a1565b6001600082815260200190815260200160002060010154600160a060020a0316817f680ad70765443c2967675ab0fb91a46350c01c6df59bf9a41ff8a8dd097464ec60006000a36000600060006001600085815260200190815260200160002060010154600160a060020a03168152602001908152602001600020819055505b60016000828152602001908152602001600020600081016000905560018101600090556002810160009055600381016000905550807f18d67da0cd86808336a3aa8912f6ea70c5250f1a98b586d1017ef56fe199d4fc60006000a25b50565b33600160a060020a03166001600084815260200190815260200160002054600160a060020a03161461063157610674565b806001600084815260200190815260200160002060030181905550817f18d67da0cd86808336a3aa8912f6ea70c5250f1a98b586d1017ef56fe199d4fc60006000a25b5050565b600060016000838152602001908152602001600020600101549050919050565b600060016000838152602001908152602001600020600301549050919050565b600060016000838152602001908152602001600020549050919050565b600060016000838152602001908152602001600020600201549050919050565b600060006000600060016000868152602001908152602001600020549350600160008681526020019081526020016000206001015492506001600086815260200190815260200160002060020154915060016000868152602001908152602001600020600301549050919350919356"));
		s_ret[Address(2601)] = Account(0, Account::ContractConception); //urlhint
		s_ret[Address(2601)].setCode(fromHex("60003560e060020a900480634983e19c14601f578063b9ca00f714603157005b602b6004356024356061565b60006000f35b603a6004356044565b8060005260206000f35b600060006000838152602001908152602001600020549050919050565b60006000838152602001908152602001600020546000148060a9575033600160a060020a03166000600084815260200190815260200160002060010154600160a060020a0316145b60b05760e4565b3360006000848152602001908152602001600020600101819055508060006000848152602001908152602001600020819055505b505056"));
		js::mValue val;
		json_spirit::read_string(c_genesisInfo, val);
		for (auto account: val.get_obj())
		{
			u256 balance;
			if (account.second.get_obj().count("wei"))
				balance = u256(account.second.get_obj()["wei"].get_str());
			else
				balance = u256(account.second.get_obj()["finney"].get_str()) * finney;
			if (account.second.get_obj().count("code"))
			{
				s_ret[Address(fromHex(account.first))] = Account(balance, Account::ContractConception);
				s_ret[Address(fromHex(account.first))].setCode(fromHex(account.second.get_obj()["code"].get_str()));
			}
			else
				s_ret[Address(fromHex(account.first))] = Account(balance, Account::NormalCreation);
		}
	}
	return s_ret;
}

// TODO: place Registry in here.

std::unique_ptr<BlockInfo> CanonBlockChain::s_genesis;
boost::shared_mutex CanonBlockChain::x_genesis;

bytes CanonBlockChain::createGenesisBlock()
{
	RLPStream block(3);

	h256 stateRoot;
	{
		MemoryDB db;
		TrieDB<Address, MemoryDB> state(&db);
		state.init();
		dev::eth::commit(genesisState(), db, state);
		stateRoot = state.root();
	}

	block.appendList(14)
			<< h256() << EmptyListSHA3 << h160() << stateRoot << EmptyTrie << EmptyTrie << LogBloom() << c_genesisDifficulty << 0 << 1000000 << 0 << (unsigned)0 << string() << sha3(bytes(1, 42));
	block.appendRaw(RLPEmptyList);
	block.appendRaw(RLPEmptyList);
	return block.out();
}

CanonBlockChain::CanonBlockChain(std::string _path, bool _killExisting): BlockChain(CanonBlockChain::createGenesisBlock(), _path, _killExisting)
{
}
